x-buildkit-env: &buildkit-env
  COMPOSE_BAKE: "true"
  DOCKER_BUILDKIT: "1"
  BUILDKIT_INLINE_CACHE: "1"

x-platform-args: &platform-args
  TARGETPLATFORM: ${PLATFORM:-linux/amd64}

services:
  # ------------------------
  # PostgreSQL
  # ------------------------
  postgres:
    image: postgres:15-alpine
    container_name: makerworks_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: makerworks
      POSTGRES_PASSWORD: makerworks
      POSTGRES_DB: makerworks
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U makerworks"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ------------------------
  # Redis
  # ------------------------
  redis:
    image: redis:7-alpine
    container_name: makerworks_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ------------------------
  # Redis Exporter
  # ------------------------
  redis_exporter:
    image: oliver006/redis_exporter:v1.62.0
    container_name: makerworks_redis_exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    command:
      - '--redis.addr=redis://makerworks_redis:6379'
    depends_on:
      redis:
        condition: service_healthy

  # ------------------------
  # Backend (FastAPI)
  # ------------------------
  backend:
    platform: ${PLATFORM:-linux/amd64}
    build:
      context: ./makerworks-backend
      dockerfile: Dockerfile
      args:
        <<: *platform-args
        WORKER_IMAGE: "false"   # ✅ Ensures no Celery deps in backend image
    image: makerworks-backend:latest
    container_name: makerworks_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./makerworks-backend/uploads:/app/uploads
      - ./makerworks-backend/logs:/app/logs
      - ./makerworks-backend/alembic:/app/alembic
    env_file:
      - .env.development
      - makerworks-backend/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks
      REDIS_URL: redis://redis:6379/0
      BASE_URL: http://localhost:8000
      <<: *buildkit-env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8000/api/v1/system/status || exit 1"]
      interval: 15s
      timeout: 10s
      start_period: 40s
      retries: 5

  # ------------------------
  # Celery Worker
  # ------------------------
  worker:
    platform: ${PLATFORM:-linux/amd64}
    build:
      context: ./makerworks-backend
      dockerfile: Dockerfile
      args:
        <<: *platform-args
        WORKER_IMAGE: "true"    # ✅ Installs Celery + Redis extras only in worker
    image: makerworks-worker:latest
    container_name: makerworks_worker
    restart: unless-stopped
    command: celery -A app.celery_worker.celery_app worker --loglevel=INFO --concurrency=2
    volumes:
      - ./makerworks-backend/uploads:/app/uploads
      - ./makerworks-backend/alembic:/app/alembic
    env_file:
      - .env.development
      - makerworks-backend/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks
      REDIS_URL: redis://redis:6379/0
      <<: *buildkit-env
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.celery_worker.celery_app status | grep -q OK"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s

  # ------------------------
  # Prometheus
  # ------------------------
  prometheus:
    image: prom/prometheus
    container_name: makerworks_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      backend:
        condition: service_healthy
      redis_exporter:
        condition: service_started

  # ------------------------
  # Grafana
  # ------------------------
  grafana:
    image: grafana/grafana
    container_name: makerworks_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
    depends_on:
      prometheus:
        condition: service_started
    volumes:
      - grafana_data:/var/lib/grafana

# ------------------------
# Volumes
# ------------------------
volumes:
  postgres_data:
  redis_data:
  grafana_data:
