x-buildkit-env: &buildkit-env
  COMPOSE_BAKE: "true"
  DOCKER_BUILDKIT: "1"
  BUILDKIT_INLINE_CACHE: "1"

services:
  frontend:
    build:
      context: ./makerworks-frontend
      dockerfile: Dockerfile
      target: development
    container_name: makerworks_frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_BASE_URL: "http://localhost:8000/api/v1"
      VITE_BACKEND_URL:  "http://localhost:8000"
    networks:
      - makerworks-net
    ports:
      - "5173:5173"
    restart: unless-stopped
    volumes:
      - ./makerworks-frontend:/app
    working_dir: /app

  backend:
    build:
      context: ./makerworks-backend
      dockerfile: Dockerfile.macos
    container_name: makerworks_backend
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: *buildkit-env
      DATABASE_URL: "postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks"
      REDIS_URL: "redis://redis:6379/0"

      # CORS & base URL
      CORS_ORIGINS: '["http://localhost:5173","http://127.0.0.1:5173","http://localhost:3000","http://127.0.0.1:3000","http://localhost:8080"]'
      BASE_URL: "http://localhost:8000"

      # Paths inside the container
      UPLOAD_DIR: "/app/uploads"
      THUMBNAILS_DIR: "/thumbnails"
      THUMBNAILS_URL_PREFIX: "/thumbnails"
      MODELS_DIR: "/models"

      # Thumbnail defaults
      THUMBNAIL_BACKEND: "plotly"
      THUMBNAIL_SIZE: "1024"
      THUMBNAIL_AZIM_DEG: "90"
      THUMBNAIL_ELEV_DEG: "0"
      THUMBNAIL_SSAA: "4"
      THUMBNAIL_FRAME_MARGIN: "0.06"
      THUMBNAIL_MAX_RATIO: "0.85"
      THUMBNAIL_CULL: "0"
      THUMBNAIL_BASE_RGB: "0.90,0.90,0.90"
      THUMBNAIL_AMBIENT: "0.62"
      THUMBNAIL_DIFFUSE: "0.38"
      THUMBNAIL_GAMMA: "1.10"
      THUMBNAIL_LIGHT_DIR: "0.30,0.20,1.0"
      THUMBNAIL_FILL_DIR: "-0.60,-0.20,1.0"
      THUMBNAIL_FILL_INT: "0.20"
      THUMBNAIL_SPEC_K: "0.03"
      THUMBNAIL_SPEC_P: "24"
      THUMBNAIL_RIM_K: "0.03"
      THUMBNAIL_FLATTEN_BG: ""   # transparent background (no flatten color)

      # ---- Bambu Bridge (use the SAME key `babu` everywhere) ----
      BAMBULAB_PRINTERS: "babu@192.168.1.66"
      BAMBULAB_SERIALS:  "babu=00M09A410201174"
      BAMBULAB_LAN_KEYS: "babu=5afba193"
      BAMBULAB_TYPES:    "babu=X1C"
      BAMBULAB_REGION:   "US"
      BAMBULAB_AUTOCONNECT: "1"

      # (optional) admin envs available to backend too (seed actually runs in migrate)
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_USERNAME: "admin"
      ADMIN_PASSWORD: "Admin#12345!"
      ADMIN_FORCE_UPDATE: "false"   # NEVER rotate password

    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/_health > /dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
      start_period: 40s

    networks:
      - makerworks-net
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./makerworks-backend:/app
      - /Users/stephenchartrand/Downloads/makerworks-repo/makerworks/uploads:/app/uploads
      - /Users/stephenchartrand/Downloads/makerworks-repo/makerworks/thumbnails:/thumbnails:rw
      - /Users/stephenchartrand/Downloads/makerworks-repo/makerworks/models:/models
    working_dir: /app

  migrate:
    build:
      context: ./makerworks-backend
      dockerfile: Dockerfile.macos
    container_name: makerworks_migrate
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/bin/sh","-lc"]
    command: >
      set -euxo pipefail;
      echo "‚è≥ Waiting for PostgreSQL...";
      until psql "postgresql://makerworks:makerworks@postgres:5432/makerworks" -c "\q" >/dev/null 2>&1; do sleep 1; done;

      echo "üîß Preparing Alembic URL...";
      : "${DATABASE_URL:=postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks}";
      # POSIX-safe replacements (no bashisms)
      ALEMBIC_URL="$(printf '%s\n' "$DATABASE_URL" | sed -e 's/+asyncpg/+psycopg/' -e 's/^postgresql:\/\//postgresql+psycopg:\/\//')";
      PSQL_URL="$(printf '%s\n' "$ALEMBIC_URL" | sed -e 's/+psycopg//')";

      echo "‚ÑπÔ∏è ALEMBIC_URL=${ALEMBIC_URL}";
      echo "üîé Ensuring migration repo has a head...";
      if [ -z "$(ALEMBIC_URL="${ALEMBIC_URL}" alembic heads 2>/dev/null | tr -d ' \n')" ]; then
        echo "üß± No heads ‚Üí creating empty baseline revision";
        ALEMBIC_URL="${ALEMBIC_URL}" alembic revision -m "baseline" --empty;
      fi;

      echo "üîé Checking alembic_version...";
      if psql "${PSQL_URL}" -tAc "select 1 from information_schema.tables where table_schema='public' and table_name='alembic_version'" | grep -q 1; then
        echo "‚úÖ alembic_version exists";
      else
        COUNT="$(psql "${PSQL_URL}" -tAc "select count(*) from information_schema.tables where table_schema='public'")";
        if [ "${COUNT}" != "0" ]; then
          echo "‚ö†Ô∏è Found ${COUNT} tables ‚Üí stamping head to match current schema";
          ALEMBIC_URL="${ALEMBIC_URL}" alembic stamp head;
        else
          echo "üì≠ Empty DB ‚Üí fresh upgrade will create schema";
        fi;
      fi;

      echo "üöÄ Applying migrations (upgrade head)‚Ä¶";
      ALEMBIC_URL="${ALEMBIC_URL}" alembic upgrade head;

      echo "üë§ Seeding admin‚Ä¶";
      python -m app.startup.admin_seed;

      echo "‚úÖ Migrations + admin seed complete";
    environment:
      <<: *buildkit-env
      DATABASE_URL: "postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks"
      REDIS_URL: "redis://redis:6379/0"
      RUN_MIGRATIONS: "true"
      # admin seed happens here, right after migrations
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_USERNAME: "admin"
      ADMIN_PASSWORD: "Admin#12345!"   # one-time create; never rotated
      ADMIN_FORCE_UPDATE: "false"
    networks:
      - makerworks-net
    restart: "no"
    volumes:
      - ./makerworks-backend:/app
    working_dir: /app

  postgres:
    image: postgres:15-alpine
    container_name: makerworks_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: makerworks
      POSTGRES_PASSWORD: makerworks
      POSTGRES_DB: makerworks
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U makerworks"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - makerworks-net

  redis:
    image: redis:7-alpine
    container_name: makerworks_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      interval: 5s
      retries: 10
    networks:
      - makerworks-net

volumes:
  postgres_data:
  redis_data:

networks:
  makerworks-net:
    name: makerworks-net
    driver: bridge
