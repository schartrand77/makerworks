services:
  postgres:
    image: postgres:15-alpine
    container_name: makerworks_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: makerworks
      POSTGRES_PASSWORD: makerworks
      POSTGRES_DB: makerworks
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U makerworks"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: makerworks_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  migrate:
    build:
      context: ./makerworks-backend
      dockerfile: Dockerfile.macos
    image: makerworks-migrate:latest
    container_name: makerworks_migrate
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo "‚è≥ Waiting for PostgreSQL..."
      until PGPASSWORD=makerworks psql -h postgres -U makerworks -d makerworks -c '\q'; do
        echo "... still waiting for db"
        sleep 1
      done
      echo "‚úÖ PostgreSQL is ready."
      echo "üîñ Stamping initial stub..."
      alembic -c alembic.ini stamp ecf884acd250
      echo "üöÄ Applying migrations..."
      alembic -c alembic.ini upgrade head
      echo "‚úÖ Migrations complete."
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      DATABASE_URL: postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks
      REDIS_URL: redis://redis:6379/0
      RUN_MIGRATIONS: "true"
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  backend:
    build:
      context: .
      dockerfile: Dockerfile.macos
    container_name: makerworks_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo "üì¶ Loading environment..."
      [ -f .env.dev ] && export $(grep -v '^#' .env.dev | xargs) || echo "‚ö†Ô∏è No .env.dev"
      echo "üïì Waiting for database..."
      until pg_isready -h postgres -U makerworks; do sleep 1; done
      echo "‚úÖ Database is ready."
      echo "üöÄ Starting application..."
      exec gunicorn -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      DATABASE_URL: postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8000/api/v1/system/status || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: Dockerfile.macos
      args:
        WORKER_IMAGE: "true"
    container_name: makerworks_worker
    restart: unless-stopped
    command: celery -A app.worker.celery_app worker --loglevel=INFO --concurrency=2
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      DATABASE_URL: postgresql+asyncpg://makerworks:makerworks@postgres:5432/makerworks
      REDIS_URL: redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
